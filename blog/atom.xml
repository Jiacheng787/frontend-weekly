<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://your-docusaurus-test-site.com/frontend-weekly/blog</id>
    <title>Frontend Weekly Blog</title>
    <updated>2022-12-12T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://your-docusaurus-test-site.com/frontend-weekly/blog"/>
    <subtitle>Frontend Weekly Blog</subtitle>
    <icon>https://your-docusaurus-test-site.com/frontend-weekly/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[置顶内容]]></title>
        <id>welcome</id>
        <link href="https://your-docusaurus-test-site.com/frontend-weekly/blog/welcome"/>
        <updated>2022-12-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[⭐️ 每周更新优质技术文章，欢迎点赞关注！]]></summary>
        <content type="html"><![CDATA[<p>⭐️ 每周更新优质技术文章，欢迎点赞关注！</p><h2>TypeScript 工程化方案</h2><ul><li>⭐️ ⭐️ <a href="https://zhuanlan.zhihu.com/p/403970666">2021 年 TypeScript + React 工程化指南</a></li><li>⭐️ ⭐️ <a href="https://juejin.cn/post/7039583726375796749#heading-22">会写 TypeScript 但你真的会 TS 编译配置吗？</a></li><li>🌛 <a href="https://juejin.cn/post/6844904102355271694">【开源】一个 React + TS 项目模板</a><ul><li>一种是使用 ts-loader + babel-loader + fork-ts-checker-webpack-plugin 通过 typescript 进行编译和类型检查</li><li>另一种是 babel-loader + @babel/preset-typescript 使用 babel 进行编译，typescript 只负责类型检查（babel 7 以上）</li></ul></li><li>🌛 <a href="https://juejin.cn/post/6999807899149008910">2021年从零开发前端项目指南</a></li><li><a href="https://juejin.cn/post/6844904052094926855">Webpack 转译 Typescript 现有方案</a></li><li>🌛 <a href="https://segmentfault.com/a/1190000015315545">使用ESLint+Prettier来统一前端代码风格</a></li><li>🌛 <a href="https://segmentfault.com/a/1190000009546913">用 husky 和 lint-staged 构建超溜的代码检查工作流</a></li></ul><h2>TS 高级技巧</h2><ul><li>🌛 <a href="https://juejin.cn/post/7007251289721536543">TypeScript是如何工作的</a></li><li>⭐️ <a href="https://juejin.cn/post/6964692485415108645">TypeScript 高级用法</a></li><li><a href="https://juejin.cn/post/6844904055039344654">TS 常见问题整理（60多个，持续更新ing）</a></li><li><a href="https://juejin.cn/post/6994102811218673700">Ts高手篇：22个示例深入讲解Ts最晦涩难懂的高级类型工具</a></li></ul><h2>TS &amp;&amp; 框架</h2><ul><li>⭐️ ⭐️ <a href="https://juejin.cn/post/6952696734078369828">React + TypeScript实践</a></li><li><a href="https://juejin.cn/post/7021674818621669389">如何优雅地在 React 中使用TypeScript，看这一篇就够了！</a></li><li>⭐️ <a href="https://juejin.cn/post/6844903865255477261">Vue3.0 前的 TypeScript 最佳入门实践</a><ul><li>虽然不是 Vue3 但是也推荐看下</li></ul></li></ul><h2>前端框架</h2><ul><li><a href="https://juejin.cn/post/7047705995534925832">盘点掘金 2021 高赞 Vue 文章</a></li><li><a href="https://juejin.cn/post/7047690546417565733">盘点掘金 2021 高赞 React 文章</a></li><li><a href="https://juejin.cn/post/7047153016771706916">盘点掘金 2021 点赞高达 6000，收藏过万的文章</a></li><li>⭐️ <a href="https://juejin.cn/post/7025524870842679310#heading-58">从 16 个方向逐步搭建基于 vue3 的前端架构</a></li><li>⭐️ <a href="https://juejin.cn/post/6874007172578033677">34条我能告诉你的Vue之实操篇</a></li><li>🌛 <a href="https://mp.weixin.qq.com/s/aOapwk4_qi8tNM7vaa7jGA">使用 React&amp;Mobx 的几个最佳实践</a></li><li>⭐️ <a href="https://juejin.cn/post/6995834232350179336">当设计模式遇上 Hooks</a></li><li>⭐️ ⭐️ <a href="https://juejin.cn/post/6844903985338400782">React Hooks 详解 【近 1W 字】+ 项目实战</a></li><li><a href="https://juejin.cn/post/6989022564043456543">「React进阶」只用两个自定义 Hooks 就能替代 React-Redux ?</a></li><li><a href="https://juejin.cn/post/6950063294270930980">「React进阶」 React全部api解读+基础实践大全(夯实基础2万字总结)</a></li><li><a href="https://juejin.cn/post/6963053793613185031">「React进阶」探案揭秘六种React‘灵异’现象</a></li><li><a href="https://juejin.cn/post/6944863057000529933">「react进阶」一文吃透react-hooks原理</a></li></ul><h2>业务成长</h2><ul><li><a href="https://juejin.cn/post/7041713124210114567">在政采云如何写前端技术方案文档</a></li><li><a href="https://juejin.cn/post/7017643726944108558">如何编写前端设计文档</a></li><li>⭐️ ⭐️ <a href="https://juejin.cn/post/6906468062943182862#heading-8">初级工程师如何快速成长和寻求突破</a></li><li>⭐️ <a href="https://juejin.cn/post/6901845776880795662#heading-0">理清思路，前端技术调研到底应该怎么做？</a></li><li><a href="https://juejin.cn/post/6869548364640288781">从实习到入职：与你分享我在政采云的工作和成长</a></li></ul><h2>Git 相关</h2><ul><li>⭐️ <a href="https://segmentfault.com/a/1190000040712052">两条命令让你的git自动变基</a></li><li>⭐️ ⭐️ <a href="https://juejin.cn/post/6844904191203213326">多年 Git 使用心得 &amp; 常见问题整理</a></li><li>🌛 <a href="https://juejin.cn/post/7000186205224566791">为什么 husky 放弃了传统的 JS 配置</a></li><li>⭐️ <a href="https://juejin.cn/post/6844904036068491278">你可能已经忽略的git commit规范</a></li><li><a href="https://gitmoji.dev/">gitmoji: An emoji guide for your commit messages</a></li></ul><h2>源码系列</h2><ul><li>⭐️ ⭐️ <a href="https://juejin.cn/post/7019185205336342542">Redux通关简洁攻略 -- 看这一篇就够了！</a></li><li>⭐️ <a href="https://juejin.cn/post/6978654109893132318">手写系列-实现一个铂金段位的 React</a></li><li>⭐️ <a href="https://juejin.cn/post/7010539227284766751">React 运行时优化方案的演进</a></li><li>⭐️ <a href="https://juejin.cn/post/6990974525273800712">带你快速手写一个简易版vue了解vue响应式</a></li><li><a href="https://juejin.cn/post/6977363265965785102">2021年，让我们手写一个mini版本的vue2.x和vue3.x框架</a></li><li><a href="https://juejin.cn/post/6846687602679119885">Vue(v2.6.11)万行源码生啃，就硬刚！</a></li><li><a href="https://juejin.cn/post/6992018709439053837">尤雨溪国外教程：亲手带你写个简易版的Vue！</a></li><li><a href="https://codepen.io/collection/DkxpbE?cursor=ZD0wJm89MCZwPTEmdj00">Vue 3 Workshop Code Samples</a></li><li>⭐️ <a href="https://juejin.cn/post/6997965021401579556">diff 算法深入一下？</a></li><li>⭐️ <a href="https://juejin.cn/post/6997943192851054606">Vue 3.2 发布了，那尤雨溪是怎么发布 Vue.js 的？</a></li><li>⭐️ <a href="https://juejin.cn/post/6994976281053888519">初学者也能看懂的 Vue3 源码中那些实用的基础工具函数</a></li></ul><h2>Webpack 系列</h2><ul><li><a href="https://juejin.cn/post/7047777251949019173">超硬核｜带你畅游在 Webpack 插件开发者的世界</a></li><li>⭐️ <a href="https://juejin.cn/post/7021729340945596424">Webpack 原理系列十：HMR 原理全解析</a></li><li><a href="https://mp.weixin.qq.com/s/gwHwVxA4zh59SBvq-onM-g">Webpack5 实践 - 构建效率倍速提升！</a></li><li>🌛 <a href="https://mp.weixin.qq.com/s/mpF6W-4dElu0UPed03oJQw">Webpack 性能系列一: 使用 Cache 提升构建性能</a></li><li>🌛 <a href="https://juejin.cn/post/6910893471339708429">我是如何将网页性能提升5倍的 — 构建优化篇</a></li><li>⭐️ ⭐️ <a href="https://juejin.cn/post/6996816316875161637">学习 Webpack5 之路（优化篇）- 近 7k 字</a></li><li>⭐️ <a href="https://juejin.cn/post/6844903912588181511">手把手带你入门 Webpack4</a></li><li>⭐️ ⭐️ <a href="https://juejin.cn/post/6949040393165996040">[<!-- -->万字总结<!-- -->]<!-- --> 一文吃透 Webpack 核心原理</a></li></ul><h2>前端工程化</h2><ul><li>🌛 <a href="https://segmentfault.com/a/1190000040496020">前端构建这十年</a></li></ul><h2>前端性能优化</h2><ul><li>⭐️ <a href="https://zhuanlan.zhihu.com/p/396010993">前端 Code Review 不完全指北(万字长文，50+case)</a></li><li>🌛 <a href="https://juejin.cn/post/7020212914020302856">写在 2021 的前端性能优化指南</a></li><li><a href="https://juejin.cn/post/7000728875676205086">深入浅出 Performance 工具 &amp; API</a></li><li><a href="https://juejin.cn/post/6904582930174705677">使用 Performance 看看浏览器在做什么</a></li></ul><h2>前端组件库实战</h2><ul><li>⭐️ <a href="https://juejin.cn/post/7021528826798669854">尤大都推荐的组件库是如何开发出来的？</a></li><li>⭐️ <a href="https://juejin.cn/post/6983854006124675108">每个前端都值得拥有自己的组件库，就像每个夏天都拥有西瓜🍉</a></li><li>⭐️ <a href="https://juejin.cn/post/6930879590554402830">Vue3组件库工程化实战 --Element3</a></li></ul><h2>Node.js 系列</h2><ul><li>⭐️ ⭐️ <a href="https://juejin.cn/post/6887961766170066951">大厂是如何用DevCloud流水线实现自动化部署Web应用的？</a></li><li>⭐️ ⭐️ <a href="https://juejin.cn/post/6902659492161421325">手把手教你使用Rollup打包 📦 并发布自己的工具库 🔧</a></li><li>⭐️ <a href="https://github.com/privatenumber/tasuku">Tasuku - 面向 Node 的最小任务运行器</a></li><li>🌛 <a href="https://juejin.cn/post/7008504029277847565">Node.js的底层原理</a></li><li>⭐️ <a href="https://mp.weixin.qq.com/s/Gcx6E4cYo6WPB8PLI72NWg">认真写了个快速创建 Node 服务的CLI，看看对小伙伴们有帮忙吗？</a><ul><li>项目地址：<a href="https://github.com/koala-coding/create-bff-service-cli">https://github.com/koala-coding/create-bff-service-cli</a></li></ul></li></ul><h2>文件上传</h2><ul><li>⭐️ <a href="https://juejin.cn/post/6844904046436843527">字节跳动面试官：请你实现一个大文件上传和断点续传</a></li><li>⭐️ <a href="https://juejin.cn/post/6990283221170651149">从零开始手写一个「开箱即用的大文件分片上传库」</a></li><li><a href="https://juejin.cn/post/6992007156320960542">5000字带你全面深入理解JS中的Stream API｜8月更文挑战</a></li></ul><h2>网络相关</h2><ul><li>⭐️ <a href="https://segmentfault.com/a/1190000024523772">一文彻底搞懂加密、数字签名和数字证书！</a></li><li>⭐️ <a href="https://juejin.cn/post/6944420222757503006">一个Response Header引发的血案(包含CDN的相关概念)</a></li></ul><h2>操作系统</h2><ul><li><a href="https://juejin.cn/post/6917096816118857736">6w字搞定Linux基本操作，建议收藏</a></li><li><a href="https://juejin.cn/post/6844904080972709901">半小时搞会 CentOS 入门必备基础知识</a></li><li><a href="https://juejin.cn/post/6875323565479034894">手摸手带你 Docker 从入门到实践</a></li></ul><h2>机器学习</h2><ul><li><a href="https://www.bilibili.com/video/BV1cD4y1D7uR">《深入理解计算机系统》- bilibili</a></li><li><a href="https://www.bilibili.com/video/BV1mb4y1d7K7">《计算机网络自顶向下方法》- bilibili</a><ul><li>这本书重点章节是第2、3、4、5、6章，其他章节可以跳过</li></ul></li><li><a href="https://www.bilibili.com/video/BV1Vt411z7wy">一天学会 MySQL 数据库</a></li><li><a href="https://www.bilibili.com/video/BV1FT4y1E74V">吴恩达《深度学习》</a></li><li><a href="https://www.bilibili.com/video/BV1qK4y1479r">推荐系统算法基础+综合项目实战</a><ul><li>再就是一些我认为很优秀的开源项目：</li><li><a href="https://github.com/zhongqiangwu960812/AI-RecommenderSystem">https://github.com/zhongqiangwu960812/AI-RecommenderSystem</a></li><li><a href="https://github.com/ZiyaoGeng/Recommender-System-with-TF2.0">https://github.com/ZiyaoGeng/Recommender-System-with-TF2.0</a></li></ul></li><li>参考：<a href="https://mp.weixin.qq.com/s/YbwQAPIEkihO7XzVvrlDCg">万字入门推荐系统！</a></li><li><a href="https://juejin.cn/post/7013674501116264484">说一说Web端侧AI</a></li><li><a href="https://juejin.cn/post/6964335363787620383">机器学习初探-线性回归</a></li><li><a href="https://juejin.cn/post/6951340421658181646">机器学习进阶 - 深入思考逻辑回归</a></li></ul><h2>Java 相关</h2><ul><li><a href="https://juejin.cn/post/7031047868806873096">使用 @Transactional 时常犯的N种错误</a></li><li><a href="https://juejin.cn/post/6984974277573836830">Spring Boot 2.x基础教程：使用@Scheduled实现定时任务</a></li><li><a href="https://juejin.cn/post/7007642025264676871">Spring Boot中使用@Async实现异步调用，加速任务的执行！</a></li><li><a href="https://github.com/fuzhengwei/CodeGuide">CodeGuide | 程序员编码指南</a></li><li><a href="https://github.com/fuzhengwei/small-spring">🌱 Spring 手撸专栏 - 易学、好写、能懂！</a></li></ul><h2>Golang 学习</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/437626980">Golang设计模式总结</a></li><li><a href="https://zhuanlan.zhihu.com/p/377834750">手把手教你如何进行 Golang 单元测试</a></li><li><a href="https://zhuanlan.zhihu.com/p/267341653">Golang 单元测试指引</a></li><li>⭐️ <a href="https://juejin.cn/post/7041846339189080101">使用Golang、Gin和React、esbuild开发的Blog</a></li><li>⭐️ <a href="https://github.com/gofiber/fiber">fiber：受到 Express 启发的 Web 应用框架</a></li><li><a href="https://go.dev/">Golang 官方文档</a></li><li><a href="https://zhuanlan.zhihu.com/p/426368274">Golang 编程思维和工程实战</a></li><li>⭐️ <a href="https://gobyexample.com/">Go by example</a></li></ul><h2>面试相关</h2><ul><li><a href="https://github.com/ConardLi/awesome-coding-js">JS 数据结构与算法 - awesome-coding-js</a></li><li><a href="https://github.com/trekhleb/javascript-algorithms">JavaScript Algorithms and Data Structures</a></li><li><a href="https://juejin.cn/post/7023208826472005668">JavaScript算法基础及面试总结（1w1字）</a></li><li>⭐️ <a href="https://juejin.cn/post/6844903929705136141">如何写出一个惊艳面试官的深拷贝?</a></li><li>⭐️ <a href="https://juejin.cn/post/6844904118704668685">面了几个说自己精通 Vue 的同学</a></li><li><a href="https://blog.csdn.net/xgangzai/article/details/120375992">高频react面试题20道（附详解）</a></li><li><a href="https://juejin.cn/post/6844903885488783374">【1 月最新】前端 100 问：能搞懂 80% 的请把简历给我</a></li></ul><h2>前端测试</h2><ul><li><a href="https://juejin.cn/post/6943430853972852750">那些年错过的React组件单元测试（上）</a></li><li><a href="https://juejin.cn/post/6946008649026240519">那些年错过的React组件单元测试（下）</a></li><li><a href="https://juejin.cn/post/6999445868550029319">前端测试集锦——如何写好前端测试保证代码质量？</a></li></ul><h2>开发环境相关</h2><ul><li><a href="https://juejin.cn/post/7019183422320934948">聊聊开发日常的效率提升工具（全）</a></li><li><a href="https://juejin.cn/post/6844904193828880391">打造舒适搬砖环境，这些是我最想推介的桌面好物</a></li><li><a href="https://juejin.cn/post/6844904012920127495">干货满满！推介几款 Mac 下非常好用的软件（第一弹）</a></li><li><a href="https://juejin.cn/post/6844904031685443592">干货满满！推介几款 Mac 下非常好用的软件（第二弹）</a></li></ul><h2>📒 掘金大佬汇总</h2><ul><li>Vue 源码、响应式机制：<a href="https://juejin.cn/user/2330620350708823/posts">ssh</a> 、<a href="https://juejin.cn/user/2137106333044861/posts">黄轶</a></li><li>React 进阶系列：<a href="https://juejin.cn/user/2418581313687390/posts">我不是外星人</a></li><li>Webpack 相关：<a href="https://juejin.cn/user/1820446985555544/posts">Tecvan</a></li><li>设计模式：<a href="https://juejin.cn/user/3544481219495806/posts">DYBOY</a></li><li>手写源码、设计模式：<a href="https://juejin.cn/user/2295436011645655/posts">蒋鹏飞</a></li><li>源码分析：若川</li><li>工程化知识卡片：<a href="https://juejin.cn/user/1556564164489389/posts">shanyue</a></li><li>个人服务器运维指南：<a href="https://shanyue.tech/op/#%E9%A2%84%E8%A7%88">shanyue</a></li><li>CSS 各种特效：<a href="https://juejin.cn/user/2330620350437678/posts">chokcoco</a></li><li>Golang 相关：<a href="https://zhuanlan.zhihu.com/p/340814811">腾讯技术工程</a></li><li>前端九条 bug 分享：<a href="https://segmentfault.com/u/lulu_up">lulu_up</a></li><li>前端工程化、学习 Golang：洛竹</li><li>Node.js 相关：五月君</li></ul><h2>📒 待学习内容</h2><ul><li><a href="https://juejin.cn/post/7017360824939315207">babel源码详解-v1.7.8</a></li><li><a href="https://juejin.cn/post/6844904094079926286">最简实现Promise，支持异步链式调用（20行）</a></li><li><a href="https://juejin.cn/post/6844904116913700877">手写一个Promise/A+,完美通过官方872个测试用例</a></li><li><a href="https://juejin.cn/post/6889247428797530126">我在工作中写React，学到了什么？性能优化篇</a></li><li><a href="https://juejin.cn/post/6844903783005175815">如何利用lerna管理模块</a></li><li><a href="https://juejin.cn/post/6969544464113074189">基于 lerna 的多包 JavaScript 项目搭建维护</a></li><li><a href="https://juejin.cn/post/6844903896767283207#heading-5">React性能优化小贴士</a></li><li><a href="https://juejin.cn/post/6844903929726107655">神奇的lambda表达式——函数式编程必学</a></li><li><a href="https://juejin.cn/post/6844903954002739213">npm进阶——如何拥有自己的包和流程自动化</a></li><li><a href="https://juejin.cn/post/6844904162124103693">React Hooks的花样玩法</a><ul><li>useDark，useClickOutside，全局状态管理</li></ul></li><li><a href="https://juejin.cn/post/6844903845227659271">正则表达式不要背</a></li><li><a href="https://juejin.cn/post/6844903825145511950">我们或许不需要 classnames 这个库</a></li><li><a href="https://juejin.cn/post/7014431215302213668">国庆爆肝，用vite+vue3+ts实现一个网页版的typora！</a></li><li><a href="https://juejin.cn/post/6982192362583752741">手摸手教你使用最新版husky(v7.0.1)让代码更优雅规范</a></li><li><a href="https://juejin.cn/post/7015476516196712462">快速入手Electron，拥有一个自己的桌面应用</a></li><li><a href="https://juejin.cn/post/6945236994247098381">在大厂是如何高效组织 npm script 的</a></li><li><a href="https://juejin.cn/post/6940042028243746823">前端开发者周刊第三期：各大厂 webpack5 实践</a></li><li><a href="https://juejin.cn/post/6937176680251424775#heading-7">【译】下一代前端构建工具 ViteJS 中英双语字幕 ｜ 技术点评</a></li><li>⭐️ <a href="https://juejin.cn/post/6924258563862822919">Webpack5 新特性业务落地实战</a></li><li>⭐️ <a href="https://webpack.docschina.org/guides/development/#choosing-a-development-tool">Webpack 官方开发指南</a></li><li><a href="https://mp.weixin.qq.com/s/P3foOrcu4StJDGdX9xavng">构建效率大幅提升，webpack5 在企鹅辅导的升级实践</a></li><li><a href="https://mp.weixin.qq.com/s/ZP2IigNVSIZKGuYxNYOYgw">如何利用 monorepo 策略管理代码？</a></li><li><a href="https://juejin.cn/post/6924854598268108807">All in one：项目级 monorepo 策略最佳实践</a></li><li><a href="https://juejin.cn/post/7007252464726458399">一顿操作，我把 Table 组件性能提升了十倍</a></li></ul><h2>📒 小目标</h2><ul><li>Vue 3.x 源码；</li><li>Vuex 4.x 源码；</li><li>Vue-Router 源码；</li><li>搭建脚手架工具（Webpack5 新特性实践）；</li><li>VS Code extension ；</li><li>cocos 游戏开发；</li><li>手写 redux 源码；</li><li>手写 redux-thunk 源码；</li><li>手写 Promise/A+ ；<ul><li><a href="https://juejin.cn/post/6844904116913700877">手写一个Promise/A+,完美通过官方872个测试用例</a></li></ul></li><li>排序算法，桶排序、计数排序，时间复杂度 O(n) ；</li><li>每日算法<ul><li><a href="https://labuladong.gitee.io/algo/%EF%BC%88%E5%9B%BD%E5%86%85%E9%80%9F%E5%BA%A6%E5%BF%AB%EF%BC%8C%E4%BD%93%E9%AA%8C%E5%A5%BD%EF%BC%8C%E6%8E%A8%E8%8D%90%EF%BC%89">https://labuladong.gitee.io/algo/（国内速度快，体验好，推荐）</a></li><li><a href="https://labuladong.github.io/algo/">https://labuladong.github.io/algo/</a></li></ul></li><li>看下面的文章，手写一个 <code>babel-plugin-import</code><ul><li><a href="https://juejin.cn/post/6930877602840182791">手写一个webpack，看看AST怎么用｜牛气冲天新年征文</a></li><li><a href="https://juejin.cn/post/6953963506693570573">前端也要懂编译：AST 从入门到上手指南</a></li><li><a href="https://juejin.cn/post/7026658230365323301">跟着源码了解Webpack编译流程</a></li><li><a href="https://juejin.cn/post/6859538537830858759">面试官：webpack原理都不会？</a></li><li><a href="https://juejin.cn/post/7026671646555504676">让 AST 操作像呼吸一样自然</a></li></ul></li><li>手把手实现一个 babel 插件<ul><li>这篇做的 demo 是一个简单的 babel-plugin-import</li><li><a href="https://juejin.cn/post/6844903746804137991">深入Babel，这一篇就够了</a></li><li>这篇做的 demo 类似 Java 中的 lambok</li><li><a href="https://juejin.cn/post/7012424646247055390">保姆级教学！这次一定学会babel插件开发！</a></li></ul></li><li><a href="https://juejin.cn/post/6992172458748936222">面向未来的前端开发模式 - 写于2021年</a></li><li><a href="https://juejin.cn/post/6990538424545443854">从零搭建Webpack5-react脚手架(附源码)</a></li><li><a href="https://github.com/JinJieTan/Peter-">手写各种源码</a></li></ul><h2>📒 推荐阅读</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/403970666">2021 年 TypeScript + React 工程化指南</a></li><li><a href="https://juejin.cn/post/6996816316875161637#heading-15">学习 Webpack5 之路（优化篇）- 近 7k 字</a></li><li><a href="https://github.com/webpack/webpack-dev-middleware">https://github.com/webpack/webpack-dev-middleware</a></li><li><a href="https://segmentfault.com/a/1190000011761306">webpack-dev-middleware 插件的使用</a></li><li><a href="https://juejin.cn/post/6949040393165996040#heading-2">[<!-- -->万字总结<!-- -->]<!-- --> 一文吃透 Webpack 核心原理</a></li><li><a href="https://juejin.cn/post/7020678344219820068">跟村长老师做【Vue DevUI 开源指南】直播一个月的感受</a></li><li><a href="https://juejin.cn/post/7021167384484380709">工程化知识卡片 008: webpack HMR 实现的核心原理</a></li><li><a href="https://juejin.cn/post/7030207667457130527">基于 Lerna 实现 Monorepo 项目管理</a></li><li><a href="https://juejin.cn/post/6959115798841393160">手摸手教你用Vue3+Typescript+Rollup+Tailwinds打造插拔式的业务组件库</a></li><li><a href="https://juejin.cn/post/6869551115420041229">一文带你快速上手Rollup</a></li><li>🌛 <a href="https://juejin.cn/post/7029525775321661470">手摸手学会搭建一个 TS+Rollup 的初始开发环境</a></li><li><a href="https://juejin.cn/post/7029292539479867429">【我要做开源】Vue DevUI开源指南08：如何实现组件的按需打包📦</a></li><li><a href="https://juejin.cn/post/7029262501833359368">【我要做开源】Vue DevUI开源指南08：Monorepo改造</a></li><li><a href="https://juejin.cn/post/6892886272377880583">这些高阶的函数技术，你掌握了么</a></li><li>🌛 <a href="https://juejin.cn/post/7028222480326066213">使用Docker Compose、Nginx、SSH和Github Actions实现前端自动化部署测试机</a></li><li><a href="https://juejin.cn/post/6844904093434019853">如何推动前端团队的基础设施建设</a></li><li>⭐️ <a href="https://juejin.cn/post/6966491047257964575">Element UI源码中学到的技巧</a></li><li><a href="https://juejin.cn/post/7026658230365323301">跟着源码了解Webpack编译流程</a></li><li><a href="https://juejin.cn/post/6859538537830858759">面试官：webpack原理都不会？</a></li><li><a href="https://juejin.cn/post/7026671646555504676">让 AST 操作像呼吸一样自然</a></li><li><a href="https://juejin.cn/post/6920044884594425864">从零撸一个CLI命令行脚手架工具</a></li><li><a href="https://juejin.cn/post/6844904197863964685">从 Element UI 源码的构建流程来看前端 UI 库设计</a></li><li><a href="https://juejin.cn/post/6943430853972852750">那些年错过的React组件单元测试（上）</a></li><li><a href="https://juejin.cn/post/6946008649026240519">那些年错过的React组件单元测试（下）</a></li><li><a href="https://juejin.cn/post/7026274816734789663">git hooks 的库 husky 源码这么简单，你也可以实现一个！</a></li><li><a href="https://juejin.cn/post/7026210002042011655">「React18新特性」深度解读之useMutableSource</a></li><li><a href="https://juejin.cn/post/6953452438300917790">【V8源码补充篇】从一道让我失眠的 Promise 面试题开始，深入分析 Promise 实现细节</a></li><li><a href="https://juejin.cn/post/6966422095274180639">[<!-- -->探索<!-- -->]<!-- -->Webpack DevServer和HMR原理</a></li><li><a href="https://juejin.cn/post/7023242274876162084">【万字】透过分析 webpack 面试题，构建 webpack5.x 知识体系</a></li><li><a href="https://juejin.cn/post/6844903881390964744">从头开始，彻底理解服务端渲染原理(8千字汇总长文)</a></li><li><a href="https://juejin.cn/post/7025164660751990798">一点关于服务端渲染的分享</a></li><li><a href="https://juejin.cn/post/6966119324478079007">从 0 构建自己的脚手架/CLI知识体系（万字） 🛠</a></li><li><a href="https://juejin.cn/post/6984939221681176607">手写一个虚拟DOM库，彻底让你理解diff算法</a></li><li><a href="https://juejin.cn/post/7026119446162997261">在 Vue 中为什么不推荐用 index 做 key</a></li><li><a href="https://www.zhihu.com/question/384048633/answer/1134746899">做了两年前端开发，平时就是拿 Vue 写写页面和组件，简历的项目经历应该怎么写得好看？</a></li><li><a href="https://juejin.cn/post/7017710911443959839">2021 年当我们聊前端部署时，我们在聊什么</a></li><li><a href="https://juejin.cn/post/7016534471734198279">分享一年以来的Electron开发经验</a></li><li><a href="https://juejin.cn/post/6844903938894872589">「前端进阶」高性能渲染十万条数据(时间分片)</a></li><li>⭐️ <a href="https://juejin.cn/post/6978654109893132318">手写系列-实现一个铂金段位的 React</a></li><li><a href="https://juejin.cn/post/6973155726302642206">手写系列-这一次，彻底搞懂 Promise</a></li><li><a href="https://juejin.cn/post/7005375860509245471">50行代码串行Promise，koa洋葱模型原来是这么实现？</a></li><li><a href="https://juejin.cn/post/6882290865763680264">玩转 node 子进程 — child_process</a></li><li><a href="https://juejin.cn/post/6844903895467032589">深入剖析：Vue核心之虚拟DOM</a></li><li>⭐️ <a href="https://juejin.cn/post/6844904055618158600">从零开始配置 react + typescript（一）：dotfiles</a></li><li><a href="https://juejin.cn/post/6937125495439900685">Webpack 案例 —— vue-loader 原理分析</a></li><li><a href="https://juejin.cn/post/7025213391618703367">TypeScript 实现斐波那契数列</a></li><li><a href="https://juejin.cn/post/6965320374451961886">用ts类型系统实现斐波那契数列</a></li></ul>]]></content>
        <author>
            <name>加菲猫</name>
            <uri>https://github.com/Jiacheng787</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[1月9日内容汇总]]></title>
        <id>1月9日内容汇总</id>
        <link href="https://your-docusaurus-test-site.com/frontend-weekly/blog/1月9日内容汇总"/>
        <updated>2022-01-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[📒 工程化方案总结下]]></summary>
        <content type="html"><![CDATA[<p>📒 工程化方案总结下</p><p><a href="https://zhuanlan.zhihu.com/p/403970666">2021 年 TypeScript + React 工程化指南</a></p><p>📒 React 16 架构</p><p>React16架构可以分为三层：</p><ul><li>Scheduler（调度器）—— 核心职责只有 1 个, 就是执行回调。把react-reconciler提供的回调函数, 包装到一个任务对象中.在内部维护一个任务队列, 优先级高的排在最前面。循环消费任务队列, 直到队列清空</li><li>Reconciler（协调器）—— 负责找出变化的组件，16版本主要是Fiber，15版本是stack。区别在于增加了优先级系统，通过遍历的方式实现可中断的递归，将fiber树的构造过程包装在一个回调函数中, 并将此回调函数传入到scheduler包等待调度</li><li>Renderer（渲染器）—— 负责将变化的组件渲染到页面上，能够将react-reconciler包构造出来的fiber树表现出来, 生成 dom 节点(浏览器中), 生成字符串(ssr)，比如说react-dom、react-native。
所以react-native的作用主要是将react提供的节点，渲染到app页面上</li></ul><p>我们书写的react-native组件，比如说View、Text等，需要通过react-native-web来变成react-dom可以识别的节点</p><p>📒 如何在 JB 全家桶中使用 VS Code 的快捷键</p><p>JB 全家桶，例如 IDEA、WebStorm、GoLand 等支持多种 keymap，如要使用 VS Code 的快捷键，只需要安装对应的 Keymap 即可：</p><p><img src="./vs_code_keymap.png" alt="image"/></p><p>安装后应用即可：</p><p><img src="./apply_keymap.png" alt="image"/></p><p>同理主题也可以安装，在 JB 全家桶中推荐使用 One Dark Theme，安装完成后点击 apply 即可：</p><p><img src="./one_dark_theme.png" alt="image"/></p><p>📒 静态页面部署方案</p><p><a href="https://juejin.cn/post/7041870446576271368">一篇教你代码同步 Github 和 Gitee</a></p><p><a href="https://mp.weixin.qq.com/s/rfyqQgpylFT7slukkbi6rw">教你如何使用vercel服务免费部署前端项目和serverless api</a></p><p>📒 webpack 热模块替换看下源码</p><p><a href="https://juejin.cn/post/7049608872553611301">webpack模块热更新原理</a></p><p><a href="https://juejin.cn/post/7021729340945596424">Webpack 原理系列十：HMR 原理全解析</a></p><p>📒 <a href="https://juejin.cn/post/7017710911443959839">2021 年当我们聊前端部署时，我们在聊什么</a></p><p>📒 <a href="https://juejin.cn/post/6844903942074138637">聊一聊前端算法面试——递归</a></p><p>📒 <a href="https://juejin.cn/post/7049293284883038238">前端单元测试入门与最佳实践</a></p><p>📒 <a href="https://juejin.cn/post/7049335008917454855">淘宝店铺的 TypeScript ESLint 规则集考量</a></p><p>📒 自动发布脚本</p><p><a href="https://github.com/release-it/release-it">https://github.com/release-it/release-it</a></p><p>📒 diff 算法相关</p><p><a href="https://github.com/snabbdom/snabbdom">https://github.com/snabbdom/snabbdom</a></p><p><a href="https://juejin.cn/post/7000266544181674014">DIff算法看不懂就一起来砍我(带图)</a></p><p>📒 <a href="https://juejin.cn/post/7048253632055083022">如何盘点出掘金的年度高赞文章？</a></p><p>📒 <a href="https://juejin.cn/post/7047705995534925832">盘点掘金 2021 高赞 Vue 文章</a></p><p>📒 <a href="https://juejin.cn/post/7047690546417565733">盘点掘金 2021 高赞 React 文章</a></p><p>📒 <a href="https://juejin.cn/post/7047153016771706916">盘点掘金 2021 点赞高达 6000，收藏过万的文章</a></p><p>📒 <a href="https://juejin.cn/post/7036318575165964325">如何测试驱动开发 React 组件？</a></p><p>📒 <a href="https://juejin.cn/post/7030250953215311908">一起来写 VS Code 插件:为你的团队提供常用代码片段</a></p><p>📒 黑暗模式常用换肤方案</p><p><strong>CSS Variables</strong></p><p>css variables 是 Web 标准实现了对深色模式的支持，以下代码通过 CSS 媒体查询：</p><pre><code class="language-css">:root {
  color-scheme: light dark;
  --nav-bg-color: #F7F7F7;
  --content-bg-color: #FFFFFF;
  --font-color: rgba(0,0,0,.9);
}

@media (prefers-color-scheme: dark) {
  :root {
    --nav-bg-color: #2F2F2F;
    --content-bg-color: #2C2C2C;
    --font-color: rgba(255, 255, 255, .8);
  }
}

:root {
  color: var(--font-color);
}

.header {
  background-color: var(--nav-bg-color);
}

.content {
  background-color: var(--content-bg-color);
}
</code></pre><p>优点：代码量最少，实现起来方便</p><p>缺点：存在浏览器兼容性，需要 edge16+ 才支持</p><p><strong>打包多份 css</strong></p><p>当然也可以手动打包 2 份 CSS 样式，通过动态引入样式文件进行切换。这种方式存在一个问题，当点击切换的时候会引起整个页面重排，因此我们需要单独打包出只包含颜色的样式文件。从这个思路出发，我们就接触到了 PostCSS。</p><p><a href="https://juejin.cn/post/7019580413110648863">使用 PostCSS 插件让你的网站支持暗黑模式</a></p><p>📒 <a href="https://juejin.cn/post/6984267680324780040">使用 NextJS 和 TailwindCSS 重构我的博客</a></p><p>⭐️ <a href="https://www.zhihu.com/question/493891614/answer/2269197391">2022 前端技术领域会有哪些新的变化？</a></p>]]></content>
        <author>
            <name>加菲猫</name>
            <uri>https://github.com/Jiacheng787</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[1月2日内容汇总]]></title>
        <id>1月2日内容汇总</id>
        <link href="https://your-docusaurus-test-site.com/frontend-weekly/blog/1月2日内容汇总"/>
        <updated>2022-01-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[📒 clsx：classnames 的替代方案]]></summary>
        <author>
            <name>加菲猫</name>
            <uri>https://github.com/Jiacheng787</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[12月26日内容汇总]]></title>
        <id>12月26日内容汇总</id>
        <link href="https://your-docusaurus-test-site.com/frontend-weekly/blog/12月26日内容汇总"/>
        <updated>2021-12-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[📒 腾讯技术工程相关文章]]></summary>
        <content type="html"><![CDATA[<p>📒 腾讯技术工程相关文章</p><ul><li><a href="https://zhuanlan.zhihu.com/p/334617737">14W 行代码量的前端页面长什么样</a></li><li><a href="https://zhuanlan.zhihu.com/p/90836859">万字长文轻松彻底入门 Flutter，秒变大前端</a></li><li><a href="https://zhuanlan.zhihu.com/p/444802648">Git 分支操作&amp;存储原理浅谈</a></li><li><a href="https://zhuanlan.zhihu.com/p/405387352">QUIC 协议详解</a></li></ul><p>⭐️ <a href="https://zhuanlan.zhihu.com/p/340814811">收藏 | 腾讯技术 2020 年精华文章合集</a></p><p>🐛 生产环境如何 debug</p><ul><li>定位错误是前端还是后端接口返回的<ul><li>前端代码全局搜索关键字（vscode 或者 chorme devtools 中搜索）</li><li>翻阅 network 面板中的请求，使用 <code>⌘ + F</code> 打开 network search 面板进行搜索</li></ul></li><li>如何调试混淆压缩后的 JS<ul><li>使用 source 面板中的 pretty-print 选项</li><li>这样还是存在问题，例如很多变量名、方法名都被混淆压缩了，然后 babel 会将 ES2015+ 语法进行语法转换，代码可读性降低</li></ul></li><li>如何在生产环境中使用 sourceMap 调试<ul><li>打开混淆压缩的代码，右键选择 Add source map</li><li>这里需要添加一个 source map URL，可以将本地项目添加到 source 面板中的 Filesystem 中，或者启用静态资源服务</li><li>添加之后就可以直接搜索项目中的源文件了</li></ul></li><li>如何在 chrome 中修改代码并调试<ul><li>chrome devtools 提供了 local overrides 能力，指定修改后的文件的本地保存目录，当修改完代码保存的时候，就会将修改后的文件保存到你指定的目录目录下，当再次加载页面的时候，对应的文件不再读取网络上的文件，而是读取存储在本地修改过的文件</li><li>打开 sources 下的 overrides 面板，点击 select folder overrides 选择修改后的文件件存储地址，我们就可以打开文件修改，修改完成后保存，重新刷新页面后，修改后的代码就被执行到了</li></ul></li></ul><blockquote><p><a href="https://juejin.cn/post/7044678301926817806">前端工程师生产环境 debugger 技巧</a></p></blockquote><p>📒 如何在 React 中优雅使用 ECharts</p><p>初始化 ECharts 的时候不要使用 id，否则无法渲染多个组件实例：</p><pre><code class="language-jsx" metastring="{5,8,15}">import * as React from &quot;react&quot;;
import * as echarts from &quot;echarts&quot;;

const LineChart = (props) =&gt; {
  const chartRef = React.useRef();

  React.useEffect(() =&gt; {
    const chart = echarts.init(chartRef.current);
    const option = {
      // ...
    }
    chart.setOptions(option);
  }, [props])
  
  return &lt;div ref={chartRef} className=&quot;chart&quot;&gt;&lt;/div&gt;
}

export default React.memo(LineChart);
</code></pre><p>如何让 ECharts 实现自适应，可以在窗口尺寸变化的时候，调用 chart 实例上的 <code>resize</code> 方法：</p><pre><code class="language-jsx" metastring="{8-10,13,17}">React.useEffect(() =&gt; {
  const chart = echarts.init(chartRef.current);
  const option = {
    // ...
  }
  chart.setOptions(option);

  const handleResize = () =&gt; {
    chart.resize();
  }

  // 绑定 resize 事件监听器
  window.addEventListener(&quot;resize&quot;, handleResize);

  return () =&gt; {
    // 组件更新或者卸载时移除监听
    window.removeEventListener(&quot;resize&quot;, handleResize);
  }
}, [props])
</code></pre><blockquote><p>推荐使用 <code>addEventListener</code> 绑定事件，可以多次绑定，但是要注意及时 remove，不然会导致内存泄漏</p></blockquote><p>📒 看火焰图分析调用栈的时候，看到一个 <code>asyncGeneratorStep</code> 的函数，一直没搞清楚这个在哪里用到了</p><p><img src="./POPO20211223-201441.png" alt="image"/></p><p>事后才想到这是 babel 语法转换引入的 helper 函数</p><p><img src="./POPO20211223-113701.png" alt="image"/></p><p>📒 使用 webpack-chain 对 vue-cli 默认配置进行修改</p><blockquote><p><a href="https://github.com/Yatoo2018/webpack-chain/tree/zh-cmn-Hans">https://github.com/Yatoo2018/webpack-chain/tree/zh-cmn-Hans</a></p></blockquote><p>📒 如何对 webpack 打包产物进行分析</p><p>经常需要分析打包产物的体积，看哪个包体积过大，做针对性优化。可以使用 Webpack Bundle Analyzer：</p><pre><code class="language-bash">$ yarn add webpack-bundle-analyzer -D
</code></pre><p>在 <code>webpack.config.js</code> 中添加如下配置：</p><pre><code class="language-js">const { BundleAnalyzerPlugin } = require(&#x27;webpack-bundle-analyzer&#x27;);

module.exports = {
  plugins: [
    new BundleAnalyzerPlugin()
  ]
}
</code></pre><p>然后执行打包构建命令：</p><pre><code class="language-bash">$ yarn build --report
</code></pre><blockquote><p><a href="https://github.com/webpack-contrib/webpack-bundle-analyzer">https://github.com/webpack-contrib/webpack-bundle-analyzer</a></p></blockquote><p>📒 create-react-app 发布 5.0 版本</p><p>本次的 5.0 版本优化了快速刷新(Fast Refresh)，支持了 Tailwind，并更新了不少内部依赖库，如 Webpack 5、Jest 27 和 EsLint 8 等。</p><blockquote><p><a href="https://github.com/facebook/create-react-app/releases/tag/v5.0.0">https://github.com/facebook/create-react-app/releases/tag/v5.0.0</a></p></blockquote><p>📒 处理你应用中的内存泄漏</p><p>作者 Stoyan 提到：“任何大小合理的应用中，都会存在一定程度的内存泄漏”。因此知道如何处理泄漏是一件很有用的事。在本文中，作者举了一个 React 中的例子，不过它的基本理念却可以运用在任何地方。</p><blockquote><p><a href="https://calendar.perfplanet.com/2021/plugging-memory-leaks-in-your-app/">https://calendar.perfplanet.com/2021/plugging-memory-leaks-in-your-app/</a></p></blockquote><p>📒 kalidokit：人体动作表情解读同步</p><p>效果还是和牛逼的，真人测试。</p><blockquote><p><a href="https://github.com/yeemachine/kalidokit">https://github.com/yeemachine/kalidokit</a></p></blockquote><p>📒 xterm：把命令行搬到浏览器</p><blockquote><p><a href="https://xtermjs.org/">https://xtermjs.org/</a></p></blockquote><p>📒 microdiff：轻量快速的对比库</p><blockquote><p><a href="https://github.com/AsyncBanana/microdiff">https://github.com/AsyncBanana/microdiff</a></p></blockquote>]]></content>
        <author>
            <name>加菲猫</name>
            <uri>https://github.com/Jiacheng787</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[12月19日内容汇总]]></title>
        <id>12月19日内容汇总</id>
        <link href="https://your-docusaurus-test-site.com/frontend-weekly/blog/12月19日内容汇总"/>
        <updated>2021-12-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[⭐️ Webpack 分包最佳实践]]></summary>
        <content type="html"><![CDATA[<p>⭐️ Webpack 分包最佳实践</p><p>SplitChunksPlugin 进行分包的三要素:</p><ol><li><code>minChunks</code>: 一个模块是否最少被 minChunks 个 chunk 所引用</li><li><code>maxInitialRequests/maxAsyncRequests</code>: 最多只能有 maxInitialRequests/maxAsyncRequests 个 chunk 需要同时加载 (如一个 Chunk 依赖 VendorChunk 才可正常工作，此时同时加载 chunk 数为 2)</li><li><code>minSize/maxSize</code>: chunk 的体积必须介于 (minSize, maxSize) 之间</li></ol><p>哪些应该单独分包：</p><ol><li>Webpack 运行时</li><li>React Framework 运行时，包括 React/React-DOM 及它们所有的依赖</li><li>大型库，体积特别大的库</li><li>公共库，至少被 4 个 Chunk 所引用的公共模块</li></ol><p>:::tip</p><p>Webpack 配置最佳实践，除了 Vue-cli 和 CRA 源码，还可以参考 <code>next.js</code> 源码：</p><p><a href="https://github.com/vercel/next.js/blob/canary/packages/next/build/webpack-config.ts">https://github.com/vercel/next.js/blob/canary/packages/next/build/webpack-config.ts</a></p><p>:::</p><p><a href="https://mp.weixin.qq.com/s/LrASIdA19iwIwng29G5HpA">Webpack 性能系列四：分包优化</a></p><p>📒 <a href="https://mp.weixin.qq.com/s/AxwT588VKRxnlkBlXICMpQ">【内部分享】看向未来 - 近期 TC39 提案汇总</a></p><p>📒 如何移除代码中的 <code>console</code></p><ol><li><p>使用 <code>uglifyjs-webpack-plugin</code> 或 <code>terser-webpack-plugin</code> 中的 <code>drop_console</code> 配置；</p></li><li><p>使用 Babel 插件 <code>babel-plugin-transform-remove-console</code>；</p></li><li><p>简单粗暴删除，直接重写 <code>console.log</code> 方法；</p><pre><code class="language-js">console.log = function() {};
</code></pre></li><li><p>手写 webpack loader 删除；</p><pre><code class="language-js">// clearConsole.js
const reg = /(console.log\()(.*)(\))/g;
module.exports = function(source) {
    source = source.replace(reg, &quot;&quot;)
    return source;
}
</code></pre><blockquote><p>基于正则匹配还是有一些问题，例如 <code>const { log } = console</code> 或者 <code>const log = console.log.bind(console)</code> 这种就匹配不到</p></blockquote></li></ol><p>📒 WebRTC 录屏技术</p><p>WebRTC 是一套基于音视轨的实时数据流传播的技术方案。通过浏览器原生 API <code>navigator.mediaDevices.getDisplayMedia</code> 方法实现提示用户选择和授权捕获展示的窗口，进而获取 stream (录制的屏幕音视流)。我们可以对 stream 进行转化处理，转成相对应的媒体数据，并将其数据存储。</p><pre><code class="language-js">var promise = navigator.mediaDevices.getDisplayMedia(constraints);
</code></pre><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getDisplayMedia">https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getDisplayMedia</a></p></blockquote><ul><li><a href="https://juejin.cn/post/7028723258019020836">浅析Web录屏技术方案与实现</a></li><li><a href="https://juejin.cn/post/6896045087659130894">从0到1打造一个 WebRTC 应用</a></li><li><a href="https://juejin.cn/post/7010954456548245541">浅聊WebRTC视频通话</a></li></ul><p>📒 Go 1.18 Beta 1 已经正支持泛型</p><ul><li><a href="https://go.dev/blog/go1.18beta1">Go 1.18 Beta 1 is available, with generics</a></li><li><a href="https://go.dev/blog/why-generics">Why Generics?</a></li><li><a href="https://go.dev/play/?v=gotip">The Go Playground</a></li></ul><p>📒 <a href="https://juejin.cn/post/7041846339189080101">使用Golang、Gin和React、esbuild开发的Blog</a></p><p>📒 使用 patch-package 修复 npm 库的紧急问题</p><p>如果使用的 npm 库有 bug，可以使用 patch-package 创建一个补丁包。</p><p><a href="https://juejin.cn/post/7029310620952428558">工程化知识卡片 022: 质量保障篇之如何优雅某个 npm 库的紧急问题</a></p><p>📒 <a href="https://mp.weixin.qq.com/s/WWQa4kJXAblBkZS5zx3HBw">5 种有趣的 useEffect 无限循环类型</a></p><p>📒 <a href="https://github.com/you-dont-need/You-Dont-Need-JavaScript">用 CSS 来代替 JS 的实现</a></p><p>📒 <a href="https://juejin.cn/post/7027995169211285512">React18 新特性：transition</a></p><p>📒 <a href="https://juejin.cn/post/7038370502926139399">「2021」我给Vue.js生态贡献代码的这一年</a></p><p>⭐️ ⭐️ fiber：受到 Express 启发的 Web 应用框架，使用 Go 开发，与 Express 的 API 非常接近</p><pre><code class="language-go">package main

import &quot;github.com/gofiber/fiber/v2&quot;

func main() {
  app := fiber.New()

  app.Get(&quot;/&quot;, func(c *fiber.Ctx) error {
    return c.SendString(&quot;Hello, World 👋!&quot;)
  })

  app.Listen(&quot;:3000&quot;)
}
</code></pre><blockquote><p><a href="https://github.com/gofiber/fiber">https://github.com/gofiber/fiber</a></p></blockquote>]]></content>
        <author>
            <name>加菲猫</name>
            <uri>https://github.com/Jiacheng787</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[12月12日内容汇总]]></title>
        <id>12月12日内容汇总</id>
        <link href="https://your-docusaurus-test-site.com/frontend-weekly/blog/12月12日内容汇总"/>
        <updated>2021-12-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[📒 优雅获取 package.json 文件]]></summary>
        <content type="html"><![CDATA[<p>📒 优雅获取 <code>package.json</code> 文件</p><p>这里需要注意一个问题，在 ES module 规范下无法直接引入 JSON 文件，只能通过 <code>require</code> 获取：</p><pre><code class="language-javascript">// ES module 模块
import React from &quot;react&quot;;
import { debounce } from &quot;lodash-es&quot;;
// JSON 模块只能通过 CJS 方式加载
const package = require(&quot;package.json&quot;);
</code></pre><p><code>import</code> 命令目前只能用于加载 ES 模块，现在有一个提案，允许加载 JSON 模块。<code>import</code> 命令能够直接加载 JSON 模块以后，就可以像下面这样写:</p><pre><code class="language-javascript">import configData from &#x27;./config.json&#x27; assert { type: &quot;json&quot; };
console.log(configData.appName);
</code></pre><blockquote><p><code>import</code> 命令导入 JSON 模块时，命令结尾的 <code>assert {type: &quot;json&quot;}</code> 不可缺少。这叫做导入断言，用来告诉 JavaScript 引擎，现在加载的是 JSON 模块</p></blockquote><p>除此之外，还可以使用第三方库 <code>read-pkg</code> 获取，原理是通过 <code>fs</code> 模块读取 <code>package.json</code> 文件，然后反序列化为 JS 对象：</p><pre><code class="language-javascript">import process from &#x27;node:process&#x27;;
import fs, {promises as fsPromises} from &#x27;node:fs&#x27;;
import path from &#x27;node:path&#x27;;
import parseJson from &#x27;parse-json&#x27;;
import normalizePackageData from &#x27;normalize-package-data&#x27;;

export async function readPackage({cwd = process.cwd(), normalize = true} = {}) {
    const filePath = path.resolve(cwd, &#x27;package.json&#x27;);
    const json = parseJson(await fsPromises.readFile(filePath, &#x27;utf8&#x27;));

    if (normalize) {
        normalizePackageData(json);
    }

    return json;
}
</code></pre><p>📒 如何覆盖某些元素的浏览器默认样式</p><p>很多元素，例如 <code>&lt;button&gt;</code>、<code>&lt;input type=&quot;text&quot; /&gt;</code>、<code>&lt;input type=&quot;checkbox&quot; /&gt;</code> 具有浏览器默认样式，有时候需要自己指定样式，如何覆盖浏览器默认样式，只需要下面一行代码：</p><pre><code class="language-css">input {
    -webkit-appearance: none;
}
</code></pre><p>📒 如何让 div 按比例缩放</p><p>有时希望 div 自适应页面宽度的时候，可以按比例缩放，这种情况下可以使用 <code>aspect-ratio</code> 属性：</p><pre><code class="language-css">div {
    aspect-ratio: auto 1 / 1;
}
</code></pre><p>推荐在 <code>ratio</code> 前面加 <code>auto</code> ，对于 input 等具有固有宽高比的替换元素将使用默认宽高比，否则就使用指定的宽高比。</p><blockquote><p>注意 <code>aspect-ratio</code> 兼容 Chrome &gt; 87 ，所有的 IE 浏览器都不兼容</p></blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/aspect-ratio">aspect-ratio - MDN</a></p><p>📒 <a href="https://www.smashingmagazine.com/2021/11/maintain-large-nextjs-application/">如何维护一个大型的 Next.js 应用</a></p><p>📒 Goober：CSS-in-JS 方案</p><p>这是一个 1 KB 大小的 CSS-in-JS 方案，可以替代 23 KB 的 styled-components 和 emotion 组合。而且如果你可以减少 goober 库 gzip 后的体积，他们还会奖励你美元。</p><blockquote><p><a href="https://github.com/cristianbote/goober">https://github.com/cristianbote/goober</a></p></blockquote><p>📒 使用支持 Tree Shaking 的包</p><p>如果可以的话，应尽量使用支持 Tree Shaking 的 npm 包，例如：</p><ul><li>使用 <code>lodash-es</code> 替代 <code>lodash</code> ，或者使用 <code>babel-plugin-lodash</code> 实现类似效果</li></ul><p>📒 win10 安装 nvm-windows</p><p>下载地址：</p><blockquote><p><a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a></p></blockquote><p>用法跟 mac 上的 nvm 类似：</p><pre><code class="language-bash"># 安装 nodejs v16.13.1
$ nvm install 16.13.1

# 查看已安装的 nodejs 版本
$ nvm list

# 使用指定版本的 nodejs
$ nvm use 16.13.1

# 卸载某个版本的 nodejs
$ nvm uninstall 16.13.1
</code></pre><blockquote><p>个人猜测是通过修改环境变量实现 node 版本切换</p></blockquote><p>在使用的时候遇到两个问题：</p><ol><li>安装老版本 nodejs  的时候，node 安装成功，但是 npm 安装失败；</li><li>使用 <code>nvm use</code> 切换 node 版本的时候报错；</li></ol><p>第一个问题，给 nvm 配置淘宝镜像即可解决。找到 nvm 安装目录下的 <code>settings.txt</code> 文件，添加配置：</p><pre><code class="language-bash">node_mirror: https://npm.taobao.org/mirrors/node/
npm_mirror: https://npm.taobao.org/mirrors/npm/
</code></pre><p>第二个问题，首先检查 nvm 安装路径没有中文、没有空格，然后如果问题还在，那就是权限问题，使用管理员权限打开 cmd 即可正常切换。</p><p>📒 获取 worker 线程最大并发数</p><p>通过下面的只读属性获取用户计算机的逻辑内核数：</p><pre><code class="language-javascript">logicalProcessors = window.navigator.hardwareConcurrency
</code></pre><p>下面的代码中，为每一个逻辑内核创建一个 worker 线程，充分利用 CPU 资源：</p><pre><code class="language-javascript">let workerList = [];

for (let i = 0; i &lt; window.navigator.hardwareConcurrency; i++) {
  let newWorker = {
    worker: new Worker(&#x27;cpuworker.js&#x27;),
    inUse: false
  };
  workerList.push(newWorker);
}
</code></pre><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/hardwareConcurrency">Navigator.hardwareConcurrency - MDN</a></p><p>📒 <a href="https://juejin.cn/post/7039315081150087181">TypeScript类型中的逆变协变</a></p><p>📒 如何优雅引入 node 内置模块</p><p>在引用 node 内置模块的时候可以加 <code>node:</code> 前缀，比如：</p><pre><code class="language-javascript">import util from &#x27;node:util&#x27;;
import { promisify } from &#x27;node:util&#x27;;
import { spawn, exec } from &#x27;node:child_process&#x27;;
</code></pre><p>通过增加前缀，可以将 node 内置模块与其他第三方模块区分开：</p><pre><code class="language-javascript">import process from &#x27;node:process&#x27;;
import fs, {promises as fsPromises} from &#x27;node:fs&#x27;;
import path from &#x27;node:path&#x27;;
import parseJson from &#x27;parse-json&#x27;;
import normalizePackageData from &#x27;normalize-package-data&#x27;;
</code></pre><p>看到这边有同学会问，为啥 node 中可以使用 ES module，实际上现在 node 已经支持了 ES module ，只需要在 <code>package.json</code> 中设置如下字段即可：</p><pre><code class="language-javascript">{
    name: &quot;xxx&quot;,
    version: &quot;1.0.0&quot;
    type: &quot;module&quot;, // 默认 commonjs
}
</code></pre><p><a href="https://juejin.cn/post/7037270522236764167">从 vue-cli 源码中，我发现27行读取 json 文件有趣的 npm 包</a></p><p>📒 gradient-string: 在终端中输出漂亮的渐变色</p><p><img src="./gradient-string.png" alt="image"/></p><blockquote><p><a href="https://github.com/bokub/gradient-string">https://github.com/bokub/gradient-string</a></p></blockquote><p>📒 <a href="https://juejin.cn/post/6978654109893132318">手写系列-实现一个铂金段位的 React</a></p>]]></content>
        <author>
            <name>加菲猫</name>
            <uri>https://github.com/Jiacheng787</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[12月5日内容汇总]]></title>
        <id>12月5日内容汇总</id>
        <link href="https://your-docusaurus-test-site.com/frontend-weekly/blog/12月5日内容汇总"/>
        <updated>2021-12-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[📒 如何切换后端环境]]></summary>
        <content type="html"><![CDATA[<p>📒 如何切换后端环境</p><p>在前端项目中，后端接口请求通常都通过 devServer 代理，这样解决了跨域问题。但是开发的时候经常需要切换后端环境，每次切换都要重启 devServer，这就导致每次都要重新构建，比较麻烦。</p><p>一种解决思路是，前端项目中后端接口地址使用 <strong>域名</strong>，在 <strong>系统 host 文件</strong> 中配置域名与 IP 地址的映射，这样每次切换后端环境，只需要修改系统 host 文件，然后在浏览器中刷新页面就可以实现切换。</p><p>但是每次手动修改 host 文件有点麻烦，可以使用 SwitchHost 工具，一键切换，非常方便。</p><p>📒 Vue 3 技术栈</p><ul><li>Vue3.2：核心库</li><li>Vite2.6：官方推出的基于 ESM 的构建工具</li><li>vue-router-next：Vue3 官方路由</li><li>pinia：官方推出的状态管理库</li><li>TypeScript：静态类型检查</li><li>Volar：Vue3 的 vscode 插件</li></ul><p>📒 Chrome 调试小技巧</p><p>在断点位置按 F9，可以一步一步往下执行，调试源码的时候查看调用栈特别有用。当然很多时候调用栈比较复杂，这时候通过 Performance 面板的火焰图看比较直观，火焰图的宽度代表执行耗时，火焰图的高度代表调用栈的深度。</p><p>📒 CommonJS 中的模块导出</p><p>CommonJS 规范中只有一种模块导出：<code>module.exports</code> ，而 <code>exports</code> 仅仅只是 <code>module.exports</code> 的引用而已</p><p>📒 推荐两个网站</p><ul><li><code>caniuse</code>：查询 api 兼容性</li><li><code>codeif</code>：变量命名</li></ul>]]></content>
        <author>
            <name>加菲猫</name>
            <uri>https://github.com/Jiacheng787</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[11月28日内容汇总]]></title>
        <id>11月28日内容汇总</id>
        <link href="https://your-docusaurus-test-site.com/frontend-weekly/blog/11月28日内容汇总"/>
        <updated>2021-11-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[📒 叮咚，您有一份「前端项目开发规范」待查收！]]></summary>
        <content type="html"><![CDATA[<p>📒 <a href="https://juejin.cn/post/7033165869224034335">叮咚，您有一份「前端项目开发规范」待查收！</a></p><p>📒 <a href="https://juejin.cn/post/7033765500228206622">你了解 Browserslist 吗</a></p><p>📒 <a href="https://labuladong.github.io/algo/4/29/105/">回溯算法解题套路框架</a></p><p>📒 Golang 学习</p><ul><li><a href="https://gobyexample.com/">Golang 编程思维和工程实战</a></li><li>⭐️ <a href="https://gobyexample.com/">Go by example</a></li></ul><p>📒 React 文档翻译</p><ul><li><a href="https://reactjs.bootcss.com/learn/queueing-a-series-of-state-updates#challenges">Queueing a Series of State Updates</a></li><li><a href="https://github.com/reactjs/zh-hans.reactjs.org">React 中文文档</a></li></ul>]]></content>
        <author>
            <name>加菲猫</name>
            <uri>https://github.com/Jiacheng787</uri>
        </author>
    </entry>
</feed>